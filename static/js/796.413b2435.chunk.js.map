{"version":3,"file":"static/js/796.413b2435.chunk.js","mappings":"0QAEaA,GAAQC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,yCAILE,GAAaF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,0C,6BCEVI,EAAe,WAC1B,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAASF,EAAaG,IAAI,SAChC,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAA4BJ,EAAAA,EAAAA,WAAS,GAArC,eAAOK,EAAP,KAAeC,EAAf,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACR,GAAKT,EAAL,CAaIA,GAVsB,WACxB,IACEQ,GAAU,SAAAE,GAAS,OAAKA,CAAL,KACnBC,EAAAA,EAAAA,IAAeX,GAAQY,MAAK,SAAAC,GAAI,OAAIT,EAAUS,EAAKC,QAAnB,GAKjC,CAJC,MAAOC,GACPC,QAAQC,IAAIF,EACb,CALD,QAMEP,GAAU,SAAAE,GAAS,OAAKA,CAAL,GACpB,CACF,CAECQ,EAZD,CAcF,GAAE,CAAClB,KAGF,iCACE,SAAC,KAAD,CAASmB,SAAS,aAAaC,cAAc,IAC5Cb,IAAU,SAAC,IAAD,KACX,SAAC,KAAD,CACEc,cAAe,CAAEC,MAAO,IACxBC,SAAU,SAACC,EAAQC,GACZD,EAAOF,OAMZvB,EAAgByB,GAChBC,EAAQC,aANNC,EAAAA,GAAAA,MACE,yDAML,EAXH,UAaE,UAACjC,EAAD,YACE,SAACH,EAAD,CAAOqC,KAAK,OAAOC,KAAK,QAAQC,aAAa,SAC7C,mBAAQF,KAAK,SAAb,0BAGJ,wBACGzB,EAAO4B,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAASC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAM/B,GAAnD,SACG2B,EAAMK,SAFFL,EAAME,GADA,QAUxB,ECjEYI,EAAS,WACpB,OACE,+BACE,SAAC1C,EAAD,KAGL,C","sources":["components/SearchMovies/SearchMovies.styled.jsx","components/SearchMovies/SearchMovies.js","pages/Movies/Movies.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, Form } from 'formik';\nexport const Input = styled(Field)`\n  width: 250px;\n`;\n\nexport const SearchForm = styled(Form)`\n  padding: 20px;\n`;\n","import { getSearchMovie } from 'components/services/API';\nimport { Formik } from 'formik';\nimport { useEffect, useState } from 'react';\nimport { NavLink, useLocation, useSearchParams } from 'react-router-dom';\nimport { Input, SearchForm } from './SearchMovies.styled';\nimport { PuffLoader } from 'components/Loader/Loader';\nimport toast, { Toaster } from 'react-hot-toast';\n\nexport const SearchMovies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const params = searchParams.get('query');\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n  const [loader, setLoader] = useState(false);\n\n  useEffect(() => {\n    if (!params) {\n      return;\n    }\n    const fetchSearchMovies = () => {\n      try {\n        setLoader(prevState => !prevState);\n        getSearchMovie(params).then(resp => setMovies(resp.results));\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoader(prevState => !prevState);\n      }\n    };\n    if (params) {\n      fetchSearchMovies();\n    }\n  }, [params]);\n\n  return (\n    <>\n      <Toaster position=\"top-center\" reverseOrder={false} />\n      {loader && <PuffLoader />}\n      <Formik\n        initialValues={{ query: '' }}\n        onSubmit={(values, actions) => {\n          if (!values.query) {\n            toast.error(\n              'Please enter the title of the movie in the search bar.'\n            );\n            return;\n          }\n          setSearchParams(values);\n          actions.resetForm();\n        }}\n      >\n        <SearchForm>\n          <Input type=\"text\" name=\"query\" autoComplete=\"off\" />\n          <button type=\"submit\">Search</button>\n        </SearchForm>\n      </Formik>\n      <ul>\n        {movies.map(movie => (\n          <li key={movie.id}>\n            <NavLink to={`/movies/${movie.id}`} state={{ from: location }}>\n              {movie.title}\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import { SearchMovies } from 'components/SearchMovies/SearchMovies';\n\nexport const Movies = () => {\n  return (\n    <>\n      <SearchMovies />\n    </>\n  );\n};\n"],"names":["Input","styled","Field","SearchForm","Form","SearchMovies","useSearchParams","searchParams","setSearchParams","params","get","useState","movies","setMovies","location","useLocation","loader","setLoader","useEffect","prevState","getSearchMovie","then","resp","results","error","console","log","fetchSearchMovies","position","reverseOrder","initialValues","query","onSubmit","values","actions","resetForm","toast","type","name","autoComplete","map","movie","to","id","state","from","title","Movies"],"sourceRoot":""}